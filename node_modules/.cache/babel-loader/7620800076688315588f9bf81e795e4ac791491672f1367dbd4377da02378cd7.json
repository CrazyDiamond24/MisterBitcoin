{"ast":null,"code":"import axios from 'axios';\nimport { storageService } from './storage.service';\nconst MARKET_PRICE_KEY = 'marketPriceDB';\nconst BLOCK_SIZE_KEY = 'blockSizeDB';\nconst TRADE_VOLUME_KEY = 'tradeVolumeDB';\nexport const bitcoinService = {\n  getRate,\n  getTradeVolume,\n  getMarketPrice,\n  getConfirmedTransactions\n};\nasync function getRate(coins) {\n  try {\n    const valueInUsd = await axios.get(`https://blockchain.info/tobtc?currency=USD&value=${coins}`);\n    return valueInUsd.data;\n  } catch (err) {\n    console.error(`failed to get coins`, err);\n  }\n}\nasync function getTradeVolume() {\n  const storedTradeVolume = storageService.load(TRADE_VOLUME_KEY);\n  if (storedTradeVolume) return storedTradeVolume;\n  try {\n    const response = await axios.get('https://api.blockchain.info/charts/trade-volume?timespan=5months&format=json&cors=true');\n    const data = response.data;\n    storageService.save(TRADE_VOLUME_KEY, data);\n    return data;\n  } catch (err) {\n    console.error('Error getting trade volume:', err);\n    return null;\n  }\n}\nasync function getMarketPrice() {\n  const storedMarketPrices = storageService.load(MARKET_PRICE_KEY);\n  if (storedMarketPrices) return storedMarketPrices;\n  try {\n    const response = await axios.get(`https://api.blockchain.info/charts/market-price?timespan=5months&format=json&cors=true`);\n    const data = response.data;\n    storageService.save(MARKET_PRICE_KEY, data);\n    return data;\n  } catch (err) {\n    console.error('Error getting market prices:', err);\n    return null;\n  }\n}\nasync function getConfirmedTransactions() {\n  const storedBlockSizes = storageService.load(BLOCK_SIZE_KEY);\n  if (storedBlockSizes) return storedBlockSizes;\n  try {\n    const response = await axios.get(`https://api.blockchain.info/charts/avg-block-size?timespan=5months&format=json&cors=true`);\n    const data = response.data;\n    storageService.save(BLOCK_SIZE_KEY, data);\n    return data;\n  } catch (err) {\n    console.error('Error getting block size:', err);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","storageService","MARKET_PRICE_KEY","BLOCK_SIZE_KEY","TRADE_VOLUME_KEY","bitcoinService","getRate","getTradeVolume","getMarketPrice","getConfirmedTransactions","coins","valueInUsd","get","data","err","console","error","storedTradeVolume","load","response","save","storedMarketPrices","storedBlockSizes"],"sources":["C:/Users/rania/Desktop/Coding/btcoinrania/src/services/bitcoin.service.js"],"sourcesContent":["import axios from 'axios'\r\nimport { storageService } from './storage.service'\r\nconst MARKET_PRICE_KEY = 'marketPriceDB'\r\nconst BLOCK_SIZE_KEY = 'blockSizeDB'\r\nconst TRADE_VOLUME_KEY = 'tradeVolumeDB'\r\nexport const bitcoinService = {\r\n  getRate,\r\n  getTradeVolume,\r\n  getMarketPrice,\r\n  getConfirmedTransactions,\r\n}\r\n\r\nasync function getRate(coins) {\r\n  try {\r\n    const valueInUsd = await axios.get(\r\n      `https://blockchain.info/tobtc?currency=USD&value=${coins}`\r\n    )\r\n    return valueInUsd.data\r\n  } catch (err) {\r\n    console.error(`failed to get coins`, err)\r\n  }\r\n}\r\nasync function getTradeVolume() {\r\n  const storedTradeVolume = storageService.load(TRADE_VOLUME_KEY)\r\n  if (storedTradeVolume) return storedTradeVolume\r\n  try {\r\n    const response = await axios.get(\r\n      'https://api.blockchain.info/charts/trade-volume?timespan=5months&format=json&cors=true'\r\n    )\r\n    const data = response.data\r\n    storageService.save(TRADE_VOLUME_KEY, data)\r\n    return data\r\n  } catch (err) {\r\n    console.error('Error getting trade volume:', err)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getMarketPrice() {\r\n  const storedMarketPrices = storageService.load(MARKET_PRICE_KEY)\r\n  if (storedMarketPrices) return storedMarketPrices\r\n  try {\r\n    const response = await axios.get(\r\n      `https://api.blockchain.info/charts/market-price?timespan=5months&format=json&cors=true`\r\n    )\r\n    const data = response.data\r\n    storageService.save(MARKET_PRICE_KEY, data)\r\n    return data\r\n  } catch (err) {\r\n    console.error('Error getting market prices:', err)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getConfirmedTransactions() {\r\n  const storedBlockSizes = storageService.load(BLOCK_SIZE_KEY)\r\n  if (storedBlockSizes) return storedBlockSizes\r\n  try {\r\n    const response = await axios.get(\r\n      `https://api.blockchain.info/charts/avg-block-size?timespan=5months&format=json&cors=true`\r\n    )\r\n    const data = response.data\r\n    storageService.save(BLOCK_SIZE_KEY, data)\r\n    return data\r\n  } catch (err) {\r\n    console.error('Error getting block size:', err)\r\n    return null\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,mBAAmB;AAClD,MAAMC,gBAAgB,GAAG,eAAe;AACxC,MAAMC,cAAc,GAAG,aAAa;AACpC,MAAMC,gBAAgB,GAAG,eAAe;AACxC,OAAO,MAAMC,cAAc,GAAG;EAC5BC,OAAO;EACPC,cAAc;EACdC,cAAc;EACdC;AACF,CAAC;AAED,eAAeH,OAAOA,CAACI,KAAK,EAAE;EAC5B,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMX,KAAK,CAACY,GAAG,CAC/B,oDAAmDF,KAAM,EAAC,CAC5D;IACD,OAAOC,UAAU,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAE,qBAAoB,EAAEF,GAAG,CAAC;EAC3C;AACF;AACA,eAAeP,cAAcA,CAAA,EAAG;EAC9B,MAAMU,iBAAiB,GAAGhB,cAAc,CAACiB,IAAI,CAACd,gBAAgB,CAAC;EAC/D,IAAIa,iBAAiB,EAAE,OAAOA,iBAAiB;EAC/C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMnB,KAAK,CAACY,GAAG,CAC9B,wFAAwF,CACzF;IACD,MAAMC,IAAI,GAAGM,QAAQ,CAACN,IAAI;IAC1BZ,cAAc,CAACmB,IAAI,CAAChB,gBAAgB,EAAES,IAAI,CAAC;IAC3C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;IACjD,OAAO,IAAI;EACb;AACF;AAEA,eAAeN,cAAcA,CAAA,EAAG;EAC9B,MAAMa,kBAAkB,GAAGpB,cAAc,CAACiB,IAAI,CAAChB,gBAAgB,CAAC;EAChE,IAAImB,kBAAkB,EAAE,OAAOA,kBAAkB;EACjD,IAAI;IACF,MAAMF,QAAQ,GAAG,MAAMnB,KAAK,CAACY,GAAG,CAC7B,wFAAuF,CACzF;IACD,MAAMC,IAAI,GAAGM,QAAQ,CAACN,IAAI;IAC1BZ,cAAc,CAACmB,IAAI,CAAClB,gBAAgB,EAAEW,IAAI,CAAC;IAC3C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;IAClD,OAAO,IAAI;EACb;AACF;AAEA,eAAeL,wBAAwBA,CAAA,EAAG;EACxC,MAAMa,gBAAgB,GAAGrB,cAAc,CAACiB,IAAI,CAACf,cAAc,CAAC;EAC5D,IAAImB,gBAAgB,EAAE,OAAOA,gBAAgB;EAC7C,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMnB,KAAK,CAACY,GAAG,CAC7B,0FAAyF,CAC3F;IACD,MAAMC,IAAI,GAAGM,QAAQ,CAACN,IAAI;IAC1BZ,cAAc,CAACmB,IAAI,CAACjB,cAAc,EAAEU,IAAI,CAAC;IACzC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;IAC/C,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}